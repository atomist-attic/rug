// Generated by Rug to TypeScript transpiler.

import { EditProject } from '@atomist/rug/operations/ProjectEditor'
import { PathExpressionEngine } from '@atomist/rug/tree/PathExpression'
import { Editor, Tags, Parameter } from '@atomist/rug/operations/Decorators'
import { Pattern } from '@atomist/rug/operations/RugOperation'
import { JavaSource, JavaType, Project } from '@atomist/rug/model/Core'
import * as helper from "@atomist/rug/tree/TreeHelper";

@Editor("ClassAnnotated", "I add FooBar annotation")
class ClassAnnotated implements EditProject {

    edit(project: Project) {
        let eng: PathExpressionEngine = project.context().pathExpressionEngine()
        eng.with<JavaSource>(project, '//JavaSource()', j => {
            eng.with<JavaType>(j, '//JavaType()', jt => {
                jt.children()
                .map(k => {
                    console.log(`Child ${k} of ${jt} with name ${jt.nodeName()}`)
                    return k
                })
                //    .filter(c => c.nodeTags().contains("constructor"))
                // TODO why does this fail? Is it not always wrapped?
                .filter(c => helper.hasTag(c, "constructor"))
                .forEach(ctor => {
                    if ( ctor.parametersSize() == 1 ) {
                        ctor.addAnnotation("com.someone", "FooBar")
                    }
                })
            })
        })
    }
}
export let editor_classAnnotated = new ClassAnnotated();