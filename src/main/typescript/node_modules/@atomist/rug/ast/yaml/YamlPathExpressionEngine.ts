
import {TreeNode} from "../../tree/PathExpression"
import {DecoratingPathExpressionEngine} from "../DecoratingPathExpressionEngine"

import {TextTreeNode} from "../../tree/PathExpression"

/**
 * PathExpressionEngine decorator that returns Scala type mixins
 * from all methods.
 */
export class YamlPathExpressionEngine extends DecoratingPathExpressionEngine {

    protected decoratorFor(n: TreeNode): any {
        if ((<any>n).value) {
            console.log(`Decorating [${n}]`)
            return new QuotedValue(n as TextTreeNode)
        }
        else 
            return null
    }
}

interface YamlValueOps {

    /**
     * Returns the actual text, not the raw value
     */
    text(): string

    updateText(to: string): void

}

export type YamlValue = YamlValueOps & TextTreeNode

class QuotedValue implements YamlValueOps {

    constructor(private node: TextTreeNode) {}

    text() {
        return this.node.value()
    }

    updateText(to: string) {
        let newValue = `"${to}"`
        console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}