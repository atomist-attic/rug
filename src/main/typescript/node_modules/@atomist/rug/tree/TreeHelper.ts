import {TreeNode,TextTreeNode,ParentAwareTreeNode} from "./PathExpression"

/**
 * Helper functions for working with TreeNodes in simple
 * case where we don't need a path expression.
 */
class TreeHelper {

    findPathFromAncestor(n: ParentAwareTreeNode, nodeTest: (TextTreeNode) => boolean): string {
        let parent = n.parent() as any // Makes checking for parent function later easy
        if (parent == null) {
            // We couldn't resolve the path
            return null
        }
        else if (nodeTest(parent)) {
            //console.log(`Gotcha: Parent is ${parent}`)
            // TODO what if it's not unique - need position, but then parent.children may reinitalize.
            // Not if a mutable container, admittedly
            return `/${n.nodeName()}`
        }
        else if (parent.parent()) { // Essentially an instanceof, which we can't do on an interface
            return this.findPathFromAncestor(parent as ParentAwareTreeNode, nodeTest) + `/${n.nodeName()}`
        }
        else
            return null
    }

    findPathFromAncestorWithTag(n: ParentAwareTreeNode, tag: String): string {
        let r = this.findPathFromAncestor(
            n,
            n => n.nodeTags().contains(tag))
        return r
    }

    /**
     * Return an ancestor meeting the given criteria
     * or null if it cannot be found
     */
    findAncestor<N extends TreeNode>(n: ParentAwareTreeNode, nodeTest: (N) => boolean): N {
        let parent = n.parent() as any // Makes checking for parent function later easy
        if (parent == null) {
            return null
        }
        else if (nodeTest(parent)) {
            //console.log(`Gotcha: Parent is ${parent}`)
            return parent as N
        }
        else if (parent.parent()) { // Essentially an instanceof, which we can't do on an interface
            return this.findAncestor(parent as ParentAwareTreeNode, nodeTest) as N
        }
        else
            return null
    }

    /**
     * Find an ancestor with a given tag
     */
    findAncestorWithTag<N extends TreeNode>(n: ParentAwareTreeNode, tag: String): N {
        let r = this.findAncestor<N>(
            n,
            n => n.nodeTags().contains(tag))
        return r
    }
}

export {TreeHelper}
