import { Project } from "../../model/Core"
import { ProjectEditor } from "../../operations/ProjectEditor"
import { ProjectGenerator } from "../../operations/ProjectGenerator"
import { ScenarioWorld } from "../ScenarioWorld"
import { Result } from "../Result"

/**
 * Subinterface of ScenarioWorld specific to
 * scenarios testing project operations
 */
export interface ProjectScenarioWorld extends ScenarioWorld {

    /**
     * Return a project editor from the local context identified by name
     */
    editor(name: string): ProjectEditor

    /**
     * Return a project generator from the local context identified by name
     */
    generator(name: string): ProjectGenerator

    /**
     * Edit the project with the given editor, validating parameters
     */
    editWith(ed: ProjectEditor, params: {})

    /**
     * Create a project using the given generator named projectName, validating parameters
     */
    generateWith(gen: ProjectGenerator, projectName: string, params: {})

    /**
     * How many modifications did editors in this scenario make?  Note
     * the initial population of a project prior to entering the
     * generator 'populate' method does not contribute to the number
     * of modifications returned by this method.
     */
    modificationsMade(): number

    /**
     * Did editing fail?
     */
    failed(): boolean

    /**
     * How many editors were run in the execution of this scenario?
     */
    editorsRun(): number
}

interface Definitions {

    Given(s: string, f: (Project, ProjectScenarioWorld?, ...args) => void): void

    When(s: string, f: (Project, ProjectScenarioWorld?, ...args) => void): void

    Then(s: string, f: (Project, ProjectScenarioWorld?, ...args) => Result | boolean): void

}

 // Registered with Nashorn by the test runner
declare var com_atomist_rug_test_gherkin_GherkinRunner$_definitions: Definitions

export function Given(s: string, f: (Project, ProjectScenarioWorld?, ...args) => void) {
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.Given(s, f)
}

export function When(s: string, f: (Project, ProjectScenarioWorld?, ...args) => void) {
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.When(s, f)
}

export function Then(s: string, f: (Project, ProjectScenarioWorld?, ...args) => Result | boolean) {
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.Then(s, f)
}

// Import well-known step definitions. It's nicer
// to have them in a separate file.
import "./WellKnownSteps.js"
