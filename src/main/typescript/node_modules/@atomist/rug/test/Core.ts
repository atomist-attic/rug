import {Project} from "../model/Core"

import {ProjectEditor} from "../operations/ProjectEditor"


export class Result {

    constructor(public result: boolean, public message: string) {}

    static Success: Result = new Result(true, "OK")

    static Failure(why: string): Result {
        return new Result(false, why)
    }
}

export interface Definitions {

    Given(s: string, f: (Project) => void): void

    When(s: string, f: (Project) => void): void

    Then(s: string, f: (Project) => Result): void
    
}

/**
 * This is registered with Nashorn by the test runner
 */
export declare var _definitions: Definitions

export function Given(s: string, f: (Project) => void) { _definitions.Given(s, f) }

export function When(s: string, f: (Project) => void) { _definitions.When(s, f) }

export function Then(s: string, f: (Project) => Result) { _definitions.Then(s, f) }


// Register well-known conditions

Given("an empty project", p => {
    console.log("An empty project")
})

