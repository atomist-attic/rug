import {TreeNode,TextTreeNode,ParentAwareTreeNode,PathExpressionEngine} from "../tree/PathExpression"
import {TreeHelper} from "../tree/TreeHelper"

import {File} from "../model/Core"

/**
 * Superclass for working with ASTs
 */
export class AstHelper {

    public constructor(public pexe: PathExpressionEngine) {}

    protected treeHelper = new TreeHelper()

    /**
     * Reparse this file, given the type and return the top level node.
     */
    protected reparseNodeUnderFile(languageNode: TextTreeNode, type: String): TextTreeNode {
        let p = languageNode.parent() as any
        if (p && p.filename) {
            // It's a file node
            let f = p as File
            let pathExpression = `/${type}()`
            let r = this.pexe.scalar<File,TextTreeNode>(f, pathExpression)
            //console.log(`Reparsed=${r}`)
            return r
        }
        else {
            throw new Error(`Parent node ${p} doesn't seem to a File`)
        }
    }
}