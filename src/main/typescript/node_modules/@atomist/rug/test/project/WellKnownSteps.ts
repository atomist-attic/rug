import { Given, Then, When } from "./Core";

import { CloneInfo } from "../ScenarioWorld";

// Register well-known steps

/**
 * Empty project.
 */
Given("an empty project", (p) => {
    /* Nothing to do */
});

/**
 * Cloned content from GitHub.
 */
Given("github ([^/]+)/([^/]+)", (p, world, owner: string, name: string) => {
    const repo = new CloneInfo(owner, name);
    const project = world.cloneRepo(repo);
    world.setProject(project);
});

/**
 * Cloned branch from GitHub.
 */
Given("github ([^/]+)/([^/]+)/([^/]+)", (p, world, owner: string, name: string, branch) => {
    const repo = new CloneInfo(owner, name).withBranch(branch);
    const project = world.cloneRepo(repo);
    world.setProject(project);
});

/**
 * The entire contents of the Rug archive project.
 */
Given("the archive root", (p) => {
    p.copyEditorBackingFilesPreservingPath("");
});

/**
 * The contents of this archive, excluding Atomist content.
 */
Given("archive non Atomist content", (p) => {
    p.copyEditorBackingProject("");
});

/**
 * Editor made changes.
 */
Then("changes were made", (p, world) => {
    return world.modificationsMade();
});

/**
 * Editor made NoChange.
 */
Then("no changes were made", (p, world) => {
    return !world.modificationsMade();
});

/**
 * Valid parameters.
 */
Then("parameters were valid", (p, world) => {
    return world.invalidParameters() == null;
});

/**
 * Invalid parameters.
 */
Then("parameters were invalid", (p, world) => {
    return world.invalidParameters() != null;
});

/**
 * Generic file existence check.
 */
Then("file at ([^ ]+) should exist", (p, w, path: string) => {
    const f = p.findFile(path);
    if (f == null) {
        throw new Error(`File at [${path}] expected, but not found`);
    }
});

/**
 * Generic file content check.
 */
Then("file at ([^ ]+) should contain (.*)", (p, w, path: string, lookFor: string) => {
    const f = p.findFile(path);
    if (f == null) {
        throw new Error(`File at [${path}] expected, but not found`);
    }

    const idx = f.content.indexOf(lookFor);
    if (idx === -1) {
        throw new Error(`File at [${path}] did not contain [${lookFor}]. Content was\n${f.content}`);
    }
});

/**
 * When step should fail.
 */
Then("it should fail", (p, world) => world.failed());

/**
 * The scenario was aborted due to an exception being thrown.
 */
Then("the scenario aborted", (p, w) => w.aborted());
