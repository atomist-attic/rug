
import {PathExpressionEngine} from "../tree/PathExpression"

/**
 * Superinterface for all Rug operations, enabling cataloging.
 */
interface RugOperation {
  name: string
  tags?: string[]
  description: string
  parameters?: Parameter[]
}

/**
 * Well-known patterns used in operation parameters.
 */
abstract class Pattern {
  public static url: string ="@java_package"
  public static any: string ="@any"
  public static group_id: string ="@group_id"
  public static java_class: string ="@java_class"
  public static java_identifier: string ="@java_identifier"
  public static java_package: string ="@java_package"
  public static project_name: string ="@project_name"
  public static port: string ="@port"
  public static ruby_class: string ="@ruby_class"
  public static ruby_identifier: string ="@ruby_identifier"
  public static semantic_version: string ="@semantic_version"
  public static version_range: string ="@version_range"
  public static uuid: string ="@uuid"
}

interface BaseParameter {
  pattern: string
  required?: boolean
  description?: string
  displayName?: string
  validInput?: string
  displayable?: boolean
  maxLength?: number
  minLength?: number
  tags?: string[]
}

interface Parameter extends BaseParameter{
  name: string
  default?: string
}


/**
 * Status of an operation.
 */
enum Status {
    Success,
    NoChange,
    Error
}

/**
 * Result of running an editor
 */
class Result {
    constructor(
        public status: Status,
        public message: string = "") {}
}

/**
 * Severity of a comment from a review
 */
enum Severity {
  Fine,
  Polish,
  Major,
  Broken
}

/**
 * A comment from a review
 */
class ReviewComment {
  constructor(
      public comment: string,
      public severity: Severity,
      public fileName?: string,
      public line?: number,
      public column?: number) {}
}

/**
 * Result of running a reviewer
 */
class ReviewResult {
  constructor(
      public note: string,
      public comments: ReviewComment[]) {}
}



export {RugOperation, Parameter, Pattern, Result, Status, ReviewResult, ReviewComment, Severity, BaseParameter}
