import {Executor, PathExpression} from '../operations/Handlers'
import {TreeNode} from '../tree/PathExpression'

abstract class IssueRug extends Executor {
  abstract name: string
  abstract label?: string
  params: {} = {}
  constructor(){
    super();
  }
  withNumber(num: number): this {
    this.params["number"] = num
    return this
  }

  withOwner(owner: string) : this {
    this.params["owner"] = owner;
    return this;
  }
  withRepo(repo: string) : this {
    this.params["repo"] = repo;
    return this;
  }
}

export class ReopenIssue extends IssueRug {
  name = "ReopenIssue"
  constructor(readonly label: string){
    super()
  }
}

export class AssignIssue extends IssueRug {
  name = "AssignIssue"
  constructor(readonly label: string){
    super()
  }
}

export interface Issue extends TreeNode{
  number(): number
  repo(): string
  owner(): string
}

class OpenIssuesExpression implements PathExpression<Issue> {
  expression: string = "/issue[.state()='open']"
  kind: Issue
}

class ClosedIssuesExpression implements PathExpression<Issue> {
  expression: "/issue[.state()='closed']"
  kind: Issue
}

export let ClosedIssues = new ClosedIssuesExpression()
export let OpenIssues = new OpenIssuesExpression()
