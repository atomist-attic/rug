
import {TreeNode} from "../../tree/PathExpression"
import {DecoratingPathExpressionEngine} from "../DecoratingPathExpressionEngine"

import {TextTreeNode} from "../../tree/PathExpression"

/**
 * PathExpressionEngine decorator that returns Scala type mixins
 * from all methods.
 */
export class YamlPathExpressionEngine extends DecoratingPathExpressionEngine {

    protected decoratorFor(n: TreeNode): YamlValueOps {
        if ((<any>n).value) {
            console.log(`Decorating [${n}]`)
            let ttn = n as TextTreeNode
            if (ttn.value().charAt(0) == '"')
                return new QuotedValue(ttn)
            else
                return new RawValue(ttn)
        }
        else 
            return null
    }
}

/**
 * Extended by classes that know how to handle YAML strings
 */
export interface YamlValueOps {

    /**
     * Returns the actual text, not the raw value,
     * which may contain quotes etc
     */
    text(): string

    /**
     * Update the actual text, taking care of quotes, newlines etc
     */
    updateText(to: string): void

}

export type YamlValue = YamlValueOps & TextTreeNode

class RawValue implements YamlValueOps {

    constructor(private node: TextTreeNode) {}

    text() {
        return this.node.value()
    }

    updateText(to: string) {
        this.node.update(to)
    }
}

class QuotedValue implements YamlValueOps {

    constructor(private node: TextTreeNode) {}

    text() {
        return this.node.value().slice(1, this.node.value().length - 1)
    }

    updateText(to: string) {
        let newValue = `"${to}"`
        console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}