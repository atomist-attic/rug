import {GraphNode, TreeNode, PathExpressionEngine, PathExpression, Match} from "../tree/PathExpression"
import {Parameter} from "./RugOperation"

interface RugCoordinate {
  readonly name: string
  readonly group: string
  readonly artifact: string
}

type InstructionKind = "generate" | "edit" | "review" | "execute" | "respond" | "command"

interface Instruction<T extends InstructionKind> {
  readonly name: string | RugCoordinate
  readonly parameters?: {}
  readonly kind: T
}

interface Plannable {}

class Respondable<T extends Review | Edit | Generate | Execute> implements Plannable {
  instruction: T
  onSuccess?: Plan | Message | Respond
  onError?: Plan | Message | Respond
}

class NonRespondable<T extends Command | Respond> implements Plannable {
  instruction: T
}

class Presentable<T extends InstructionKind> {
  instruction: Instruction<T> | PresentableGenerate | PresentableEdit | PresentableReview
  label?: string
}

// Location to a project.
// in the future, we could add things like github urls, orgs etc.
interface ProjectReference {

}

interface ProjectInstruction<T extends InstructionKind> extends Instruction<T> {
  project: string | ProjectReference
}

interface Review extends ProjectInstruction<"review"> {

}

interface Edit extends ProjectInstruction <"edit">{

}

//extends ProjectInstruction because we need to know the project name
interface Generate extends ProjectInstruction <"generate"> {

}

//because in a message, we may not know project name yet
interface PresentableGenerate extends Instruction<"generate"> {
    project?: string | ProjectReference
}

//because in a message, we may not know project name yet
interface PresentableEdit extends Instruction<"edit"> {
    project?: string | ProjectReference
}

//because in a message, we may not know project name yet
interface PresentableReview extends Instruction<"review"> {
    project?: string | ProjectReference
}

interface Execute extends Instruction<"execute"> {
}

interface Command extends Instruction<"command"> {

}

interface Respond extends Instruction<"respond"> {

}

interface HandleCommand {
  handle(ctx: HandlerContext): Plan | Message
}

interface HandleEvent<R extends GraphNode, M extends GraphNode> {
  handle(root: Match<R,M>): Plan | Message
}

interface HandleResponse<T>{
  handle(response: Response<T>): Plan | Message
}

interface HandlerContext {
  pathExpressionEngine(): PathExpressionEngine
}

enum Status {
  failure,
  success
}

interface Response<T> {
  msg(): string
  code(): number
  status(): Status
  body(): T
}

/**
 * A bunch of stuff to do asynchronously
 * Messages got to the bot.
 * Rugs are run straight away
 */
class Plan {

   private _messages: Message[] = [];
   private _instructions: Plannable[] = [];

   messages(): Message[] { return this._messages }

   instructions(): Plannable[] { return this._instructions }

   public add?(thing: Plannable | Message): this {
     if(thing instanceof Message){
       this._messages.push(thing)
     }
     else {
        this._instructions.push(thing)
     }
     return this;
   }
}

/**
Represents a Message to the bot.
Any rugs can contain unbound parameters, and the bot will try to fill them out
*/
class Message {

  body: string | Json;
  channelId?: string;
  instructions?: Presentable<any>[] = [];

  treeNode?: GraphNode;
  correlationId?: string

  public withCorrelationId?(id: string) : this {
    this.correlationId = id;
    return this;
  }

  public withTreeNode?(node: GraphNode) : this {
    this.treeNode = node;
    return this;
  }

  constructor(about: string | Json){
    this.body = about;
  }

  public addAction?(instruction: Presentable<any>): this {
    this.instructions.push(instruction)
    return this;
  }
}

//from https://github.com/Microsoft/TypeScript/issues/1897
interface Json {
	[x: string]: string | number | boolean | Date | Json | JsonArray;
}

interface JsonArray extends Array<string | number | boolean | Date | Json | JsonArray> { }

abstract class MappedParameters {
  static readonly REPO_OWNER: string = "atomist/owner"
  static readonly REPOSITORY: string = "atomist/repository"
  static readonly REPO_USER_TOKEN: string = "atomist/github/user_token=repo"
}

export {MappedParameters}
export {Respond, Presentable, NonRespondable, Respondable, Instruction, Response, HandlerContext, Plan, Message, Execute}
export {HandleResponse, HandleCommand, HandleEvent}
