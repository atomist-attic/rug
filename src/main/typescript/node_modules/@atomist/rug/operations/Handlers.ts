import {TreeNode} from "../tree/PathExpression"

interface RugCoordinate {
  group: string
  artifact: string
  version?: string
  name: string
}

interface Rug {
  readonly name: string | RugCoordinate
  readonly params: {}
  readonly kind: "executor" | "generator" | "editor"
}

abstract class Executor implements Rug {
  abstract name: string
  abstract params: {}
  kind: "executor"
}

abstract class Generator implements Rug {
  abstract name: string
  abstract params: {}
  kind: "generator"
}

abstract class Editor implements Rug {
  abstract name: string
  abstract params: Object
  kind: "editor"
}

interface Event<R extends TreeNode> {
  child(): R
}

abstract class PathExpression<T extends TreeNode> {
  readonly expression: string
  readonly kind: T
}

interface Handler<T extends TreeNode> {
  readonly name: string
  readonly description: string
  readonly expression: PathExpression<T>
  readonly tags?: string[]
  handle(root: Event<T>): Response
}

class Response {
   private messages: Message[] = [];

   public addMessage(message: Message) : this{
     this.messages.push(message)
     return this;
   }

  //TODO - we should add this back in when we want to invoke rugs directly without the bot
  //  private rugs: Rug[]
  //  public addExecutor(rug: Executor) {
  //    this.rugs.push(rug)
  //    return this;
  //  }
}

class Message {
  text: string;
  channelId: string;
  regarding: TreeNode;

  private rugs: Rug[] = []

  constructor(node: TreeNode){
    this.regarding = node
  }

  public addExecutor(rug: Executor): this {
    this.rugs.push(rug)
    return this;
  }

  public addEditor(rug: Editor): this {
    this.rugs.push(rug)
    return this;
  }

  public addGenerator(rug: Generator) : this {
    this.rugs.push(rug)
    return this;
  }
}

export {Handler, Event, Response, Message, Executor, Generator, Editor, PathExpression}
