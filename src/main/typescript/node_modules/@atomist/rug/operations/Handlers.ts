import {TreeNode, PathExpressionEngine, PathExpression, Match} from "../tree/PathExpression"
import {Project} from "../model/Core"
import {Parameter} from "./RugOperation"

interface RugCoordinate {
  readonly name: string
  readonly group: string
  readonly artifact: string
  readonly version?: string
}

type InstructionKind = "generate" | "edit" | "review" | "execute" | "respond" | "command"

interface Secret {
  id: string //location/key of the secret
  name: string //the name which will be referenced from an Execution
}

interface Instruction<T extends InstructionKind> {
  readonly name: string | RugCoordinate
  readonly parameters?: Json
  readonly kind: T
  onSuccess?: Plan | Message | Respond
  onError?: Plan | Message | Respond
}

interface ProjectInstruction<T extends InstructionKind> extends Instruction<T> {
  project: Project
}

interface Review extends ProjectInstruction<"review"> {

}

interface Edit extends ProjectInstruction <"edit">{

}

interface Generate extends Instruction <"generate">{

}

interface Execute extends Instruction<"execute">{
  readonly secrets?: Secret[]
}

interface Command extends Instruction<"command">{

}

interface Respond extends Instruction<"respond">{

}

interface HandleCommand{
  handle(ctx: CommandContext): Plan | Message
}

interface HandleEvent<R extends TreeNode, M extends TreeNode> {
  handle(root: Match<R,M>): Plan | Message
}

interface HandleResponse<T>{
  handle(response: Response<T>): Plan | Message
}

interface CommandContext {
  pathExpressionEngine(): PathExpressionEngine
}

interface Response<T> {
  readonly status: string
  readonly code: number
  readonly body?: T
}

/**
A bunch of stuff to do asynchronously
Messages got to the bot.
Rugs are run straight away
*/

class Plan {
   private messages: Message[] = [];
   private instructions: Instruction<any>[] = [];
   public add?(thing: Edit | Generate | Review | Execute | Message): this {
     if(thing instanceof Message){
       this.messages.push(thing)
     }else{
        this.instructions.push(thing)
     }
     return this;
   }
}
/**
Represents a Message to the bot.
Any rugs can contain unbound parameters, and the bot will try to fill them out
*/
class Message {
  text?: string;
  body?: Json;
  channelId?: string;
  node?: TreeNode;
  instructions?: Instruction<any>[]

  constructor(about: string | Json){
    if(typeof about == 'string'){
        this.text = about;
    }else{
        this.body = about;
    }
  }

  public regarding?(node: TreeNode) : this {
    this.node = node;
    return this;
  }

  public addAction?(instruction: Edit | Generate | Review | Command): this {
    this.instructions.push(instruction)
    return this;
  }
}

//from https://github.com/Microsoft/TypeScript/issues/1897
interface Json {
	[x: string]: string | number | boolean | Date | Json | JsonArray;
}

interface JsonArray extends Array<string | number | boolean | Date | Json | JsonArray> { }

export {Respond, Instruction, Response, CommandContext, Plan, Message}
export {HandleResponse, HandleCommand, HandleEvent}
