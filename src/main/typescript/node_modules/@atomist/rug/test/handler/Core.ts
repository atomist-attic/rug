import {ScenarioWorld} from "../ScenarioWorld"
import {Result} from "../Result"
import {Plan} from "../../operations/Handlers"
import {GraphNode} from "../../tree/PathExpression"

/**
 * All handler scenario worlds expose the plan,
 * if constructed by code under test.
 */
export interface HandlerScenarioWorld extends ScenarioWorld {

    /**
     * Throws an exception if no plan was recorded
     */
    plan(): Plan
}

/**
 * Subinterface of ScenarioWorld specific to 
 * scenarios testing project operations
 */
export interface CommandHandlerScenarioWorld extends HandlerScenarioWorld {
    
    /**
     * Return the CommandHandler with the given name, or null if none is found.
     * Pass to invokeHandler
     */
    commandHandler(name: string): any
    
    /**
     * Execute the given handler, validating parameters
     */
    invokeHandler(commandHandler: any, params?: {})

}

export interface EventHandlerScenarioWorld extends HandlerScenarioWorld {
    
    /**
     * Register the named handler to respond to input
     * Return the handler, or null if none is found.
     */
    registerHandler(name: string): any
    
    /**
     * Publish the given event. Should be materialized
     */
    sendEvent(n: GraphNode): void
}

 
interface Definitions {

    Given(s: string, f: (Project, HandlerScenarioWorld?) => void): void

    When(s: string, f: (Project, HandlerScenarioWorld?) => void): void

    Then(s: string, f: (Project, HandlerScenarioWorld?) => Result | boolean): void
    
}

 // Registered with Nashorn by the test runner
declare var com_atomist_rug_test_gherkin_GherkinRunner$_definitions: Definitions

export function Given(s: string, f: (Project, HandlerScenarioWorld?) => void) { 
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.Given(s, f) 
}

export function When(s: string, f: (Project, HandlerScenarioWorld?) => void) { 
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.When(s, f) 
}

export function Then(s: string, f: (Project, HandlerScenarioWorld?) => Result | boolean) { 
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.Then(s, f) 
}

// Import well-known step definitions. It's nicer
// to have them in a separate file.
import "./WellKnownSteps.js"
